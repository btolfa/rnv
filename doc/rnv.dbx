<?xml version="1.0" encoding="utf-8"?>
<article>

<title>
RNV &#x2014; Relax NG Compact Syntax Validator in C
</title>
<subtitle>
Version 1.4
</subtitle>


<abstract>
<para>
<application>RNV</application> is an implementation of <citetitle>Relax NG Compact Syntax</citetitle>, <ulink url="http://relaxng.org/compact-20021121.html">http://relaxng.org/compact-20021121.html</ulink>. It is written in ANSI C, the command-line utility uses <application>Expat</application>, <ulink url="http://www.jclark.com/xml/expat.html">http://www.jclark.com/xml/expat.html</ulink>. It is distributed under BSD license, see <filename>license.txt</filename> for details.
</para>
<para>
RNV is a part of an on-going work, and the current code can have bugs and shortcomings; however, it validates documents against a number of grammars. I use it.
</para>
 </abstract>
<section>
<title>
New since 1.3
</title>
<para> To facilitate the embedding of RNV into heterogeneous
environments, I have developed <link linkend="RVP">RVP</link>, a
pipe that expects validation primitives on one end and emits
validation diagnostics from the other. Embedding examples in Perl
and Python are provided; I believe that, on the day of writing it,
these are the fastest and most conformant (if not the only) Relax
NG validation solutions for these languages. Several changes have
been made to the core modules, mostly to provide better separation
 of layers.
</para>
</section>

<section>
<title>
News since 1.2
</title>

<para>
This release has many performance and convenience enhancements. Pattern pools are now one-dimensional arrays, which conserves space and gives better performance. Pass-through mode has been added to facilitate use of rnv in pipes. <application>ARX</application>, an utility to automatically associate documents and grammars, is included in the distribution; details are below. A simple plug-in for vim, <ulink url="http://www.vim.org/">http://www.vim.org/</ulink>, is provided to use  <varname>RNV</varname> with the editor. The script uses <application>ARX</application> to automatically choose the grammar for a document.
</para>
</section>

<section>
<title>
Package Contents
</title>

<note>
<para>
I have put <filename>rnv.exe</filename> and <filename>arx.exe</filename>,  Win32 executables statically linked with a current version of Expat from <ulink url="http://expat.sourceforge.net/">http://expat.sourceforge.net/</ulink>, into a separate distribution archive (with name ending in <filename>-win32bin</filename>). It contains only the program binaries and should be available from the same location as the source distribution.
</para>
</note>

<para>
The package consists of:
</para>
<itemizedlist mark="box">
<listitem><para>the license, <filename>license.txt</filename>;
</para></listitem>
<listitem><para>the source code, <filename>*.[ch]</filename>;
</para></listitem>
<listitem><para>the source code map, <filename>src.txt</filename>;
</para></listitem>
<listitem><para><filename>Makefile</filename> for unix-like systems;
</para></listitem>
<listitem><para><filename>Makefile.bcc</filename> for Win32 and Borland C/C++ Compiler;
</para></listitem>
<listitem><para><filename>tools/xck</filename>, a simple shell script I am using to validate documents;
</para></listitem>
<listitem><para><filename>tools/*.rnc</filename>, sample Relax NG grammars;
</para></listitem>
<listitem><para>the log of changes, <filename>changes.txt</filename>;
</para></listitem>
<listitem><para>this file, <filename>readme.txt</filename>.
</para></listitem>
<listitem><para>Other scripts, samples and plug-ins appear in <filename>tools/</filename> eventually.</para></listitem>
</itemizedlist>
</section>

<section>
<title>
Installation
</title>

<para>
On Unix-like systems, run <command>make</command>. If you are using Expat 1.2, define <varname>EXPAT_H</varname> as <filename>xmlparse.h</filename> (instead of <filename>expat.h</filename>).
</para>

<para>
On Windows, use rnv.exe. To recompile from the sources, use Makefile.bcc with <application>Borland C/C++ Compiler</application>, or create a makefile or project for your environment.
</para>
</section>

<section>
<title>
Invocation
</title>

<para>
The command-line syntax is
</para>
<synopsis>

        rnv {-q|-p|-s|-v|-h} grammar.rnc {document1.xml}

</synopsis>

<para>
If no documents are specified, <application>RNV</application> attempts to read the XML document from the standard input. The options are:
</para>
<variablelist>
<?dbfo term-width="24pt"?><varlistentry>
<term>
<option>-q</option>
</term>
<listitem><para>
names of files being processed are not printed; in error messages, expected elements and attributes are not listed;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-p</option>
</term>
<listitem><para>
copies the input to the output;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-s</option>
</term>
<listitem><para>
uses less memory and runs slower;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem><para>
prints version number;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h</option>
</term>
<listitem><para>
displays usage summary and exits.
</para></listitem>
</varlistentry>
</variablelist>
</section>

<section>
<title>
Limitations
</title>

<itemizedlist>
<listitem><para>
RNV assumes that the encoding of the syntax file is UTF-8.
</para></listitem>

<listitem>
<para>
Support for XSL Schema Part 2: Datatypes is partial. 
</para>
<itemizedlist mark="disc">
<listitem><para>ordering for <varname>duration</varname> is not implemented;
</para></listitem>
<listitem><para> only local parts of <classname>QName</classname> values are checked for equality, <varname>ENTITY</varname> values are only checked for lexical validity.
</para></listitem>
</itemizedlist>
</listitem>
<listitem><para>
The schema parser does not check that all restrictions are obeyed, in particular, restrictions 7.3 and 7.4 are not checked.
</para></listitem>

<listitem>
<para>
RNV for Win32 platforms is a Unix program compiled on Win32. It expects file paths to be written with normal slashes; if a schema is in a different directory and includes or refers external files, then the schema's path must be written in the Unix way for the relative paths to work. For example, under Windows, rnv that uses <filename>..\schema\docbook.rnc</filename> to validate <filename>userguide.dbx</filename> should be invoked as
</para>

<programlisting>

      rnv.exe ../schema/docbook.rnc userguide.dbx 
</programlisting>
</listitem>
</itemizedlist>
</section>

<section>
<title>Applications</title>
<para>The distribution includes several utilities built upon <application>RNV</application>; they are listed and described in the following sections.
</para> 

<section>
<title>
ARX
</title>

<para>
<application>ARX</application> is a tool to automatically determine the type of a document from its name and contents. It is inspired by James Clark's schema location approach for nXML, <ulink url="http://groups.yahoo.com/group/emacs-nxml-mode/message/259">http://groups.yahoo.com/group/emacs-nxml-mode/message/259</ulink>, and is a development of the idea described in <ulink url="http://relaxng.org/pipermail/relaxng-user/2003-December/000214.html">http://relaxng.org/pipermail/relaxng-user/2003-December/000214.html</ulink>. 
</para>

<para>
<application>ARX</application> is a command-line utility. The invocation syntax is
</para>

<synopsis>

        arx {-n|-v|-h} document.xml  arx.conf {arx.conf}

</synopsis>

<para><application>ARX</application> either prints a string corresponding to the document's type or nothing if the type cannot be determined. The options are:
</para>
<variablelist>
<?dbfo term-width="24pt"?><varlistentry>
<term>
<option>-n</option>
</term>
<listitem><para>
turns off prepending base path of the configuration file to the result, even if it looks like a relative path (useful when the configuration file and the grammars are in separate directories, or for association with something that is not a file);
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem><para>
prints current version;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h</option>
</term>
<listitem><para>
displays usage summary and exits.
</para></listitem>
</varlistentry>
</variablelist> 

<para>
The configuration file must confrom to the following grammar:
</para>

<programlisting>

      arx = grammars route*
      grammars = "grammars"  "{" type2string+ "}"
      type2string =  type "=" literal
      type = nmtoken
      route = match|nomatch|valid|invalid
      match = "=~" regexp "=&gt;" type
      nomatch = "!~" regexp "=&gt;" type
      valid = "valid" "{" rng "}" "=&gt;" type
      invalid = "!valid" "{" rng "}" "=&gt;" type

      literal=string in '"', '"' inside must be prepended by '\'
      regexp=string in '/', '/' inside must be prepended by '\'
      rng=Relax NG Compact Syntax

      Comments start with # and continue till the end of line.
</programlisting>

<para>Rules are processed sequentially, the first matching rule determines the file's type. Relax NG templates are matched against file contents, regular expressions are applied to file names.
The sample below associates documents with grammars for XSLT, DocBook or XSL FO. 
</para>

<programlisting>

      grammars {
        docbook="docbook.rnc"
        xslt="xslt.rnc"
        xslfo="fo.rnc"
      }

      valid {
        start = element (book|article|chapter|reference) {any}
        any = (element * {any}|attribute * {text}|text)*
      } =&gt; docbook

      !valid {
        default namespace xsl = "http://www.w3.org/1999/XSL/Transform"
        start = element *-xsl:* {not-xsl}
        not-xsl = (element *-xsl:* {not-xsl}|attribute * {text}|text)*
      } =&gt; xslt

      =~/.*\.xsl/ =&gt; xslt
      =~/.*\.fo/ =&gt; xslfo
</programlisting>

<para>
<application>ARX</application> can also be used to link documents to any type of information or processing. 
</para>
</section>
<section id="RVP">
<title>
RVP
</title>
<para><application>RVP</application> is abbreviation for <emphasis
role="bold">R</emphasis>elax NG <emphasis role="bold">V</emphasis>alidation
<emphasis role="bold">P</emphasis>ipe. It reads validation primitives
from the standard input and reports result to the standard output;
it's main purpose is to ease embedding of a Relax NG validator into
various languages and environment. An apllication would launch
<application>RVP</application> as a parallel process and use a
simple protocol to perform validation. The protocol, in BNF, is:
</para>
<programlisting>

     query ::= (start
       | start-tag-open
       | attribute
       | start-tag-close
       | text
       | end-tag) z.
     start ::= "start" [gramno].
     start-tag-open ::= "start-tag-open" patno name.
     attribute ::= "attribute" patno name value.
     start-tag-close :: = "start-tag-close" patno name.
     text ::= ("text"|"mixed") patno text.
     end-tag ::= "end-tag" patno name.
     response ::= (ok | er | error) z.
     ok ::= "ok" patno.
     er ::= "er" patno erno.
     error ::= "error" patno erno error.
     z ::= "\0" .
</programlisting>

<itemizedlist>
<listitem><para>
RVP assumes that the last colon in a name separates the local
part from the namespace URI (it is what one gets if specifies ':'
as namespace separator to Expat).
</para></listitem>
<listitem><para>
Error codes can be grabbed from rvp sources by <command>grep -l
_ER_ *.h</command> and OR-ing them with corresponding masks from
erbit.h. Additionally, error 0 is the protocol format error.
</para></listitem>
<listitem><para> Either "er" or "error" responses are returned, not
both; <option>-q</option> chooses between concise and verbose forms
(invocation syntax described later).
</para></listitem>
<listitem><para><command>start</command> passes the index of a
grammar (first grammar in the list of command-line arguments has
number 0); if the number is omitted, 0 is assumed.
</para></listitem>
</itemizedlist>
<para>The command-line syntax is:
</para>

<synopsis>

        rvp {-q|-s|-v|-h} {schema.rnc}

</synopsis>

<para>The options are:
</para>
<variablelist>
<?dbfo term-width="24pt"?>
<varlistentry>
<term>
<option>-q</option>
</term>
<listitem><para>returns only error numbers, suppresses messages;</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-s</option>
</term>
<listitem><para>takes less memory and runs slower;</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem><para>
prints current version;
</para></listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h</option>
</term>
<listitem><para>
displays usage summary and exits.
</para></listitem>
</varlistentry>
</variablelist>
<para>To assist embedding RVP, samples in Perl 
(<filename>tools/rvp.pl</filename>) and Python
(<filename>tools/rvp.py</filename>) are provided. The scripts use
Expat wrappers for each of the languages to parse documents; they
take a Relax NG grammar (in the compact syntax) as the command line
argument and read the XML from the standard input. For example, the
following commands validate <filename>rnv.dbx</filename> against
<filename>docbook.rnc</filename>:
</para>
<programlisting>

      perl rvp.pl docbook.rnc &lt; rnv.dbx
      python rvp.py docbook.rnc &lt; rnv.dbx

</programlisting>
<para>The scripts are  kept simple and unobscured to illustrate the
technique, rather than being designed as general-purpose modules.
Programmers using Perl, Python, Ruby and other languages are
encouraged to implement and share reusable RVP-based components for
their languages of choice.
</para>
</section>
</section>
<section>
<title>
New versions
</title>
<para>
Visit <ulink url="http://davidashen.net/">http://davidashen.net/</ulink> for news and downloads.
</para>
</section>

</article>
