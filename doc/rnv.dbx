<article>
<title>
RNV -- Relax NG Compact Syntax Validator in C
</title>
<subtitle>
Version 1.3
</subtitle>


<abstract>
<para>
<application>RNV</application> is an implementation of <citetitle>Relax NG Compact Syntax</citetitle>, <ulink>http://relaxng.org/compact-20021121.html</ulink>. It is written in ANSI C, the command-line utility uses <application>Expat</application>, <ulink>http://www.jclark.com/xml/expat.html</ulink>. It is distributed under BSD license, see <filename>license.txt</filename> for details.
</para>
<para>
RNV is a part of an on-going work, and the current code can have bugs and shortcomings; however, it validates documents against a number of grammars. I use it.
</para>
 </abstract>

<section>
<title>
News since 1.2
</title>

<para>
This release has many performance and convenience enhancements. Pattern pools are now one-dimensional arrays, which conserves space and gives better performance. Pass-through mode has been added to facilitate use of rnv in pipes. <application>ARX</application>, an utility to automatically associate documents and grammars, is included in the distribution; details are below. A simple plugin for vim, <ulink url="http://www.vim.org/">http://www.vim.org/</ulink>, is provided to use  <varname>RNV</varname> with the editor. The script uses <application>ARX</application> to automatically choose the grammar for a document.
</para>
</section>

<section>
<title>
News since 1.1
</title>

<para>
I have implemented XML Schema datatypes checking. The support is not complete (details are in the list of limitations). On the bright side, the utility now includes a complete and sufficiently fast implementation of Unicode regular expressions (with ugly XML Schema syntax, but still useful).
</para>
</section>

<section>
<title>
Package Contents
</title>

<note>
<para>
I have put <filename>rnv.exe</filename> and <filename>arx.exe</filename>,  Win32 executables statically linked with a current version of Expat from <ulink>http://expat.sourceforge.net/</ulink>, into a separate distribution archive (with name ending in <filename>-win32bin</filename>). It contains only the program binaries and should be available from the same location as the source distribution.
</para>
</note>

<para>
The package consists of:
</para>
<itemizedlist>
<listitem>
- the license, <filename>license.txt</filename>;
</listitem>
<listitem>
- the source code, <filename>*.[ch]</filename>;
</listitem>
<listitem>
- the source code map, <filename>src.txt</filename>;
</listitem>
<listitem>
- <filename>Makefile</filename> for unix-like systems;
</listitem>
<listitem>
- <filename>Makefile.bcc</filename> for Win32 and Borland C/C++ Compiler;
</listitem>
<listitem>
- <filename>tools/rnv.vim</filename>, a plugin for Vim;
</listitem>
<listitem>
- <filename>tools/arx.conf</filename>, <application>ARX</application> configuration file;
</listitem>
<listitem>
- <filename>tools/*.rnc</filename>, sample Relax NG grammars;
</listitem>
<listitem>
- the log of changes, <filename>changes.txt</filename>;
</listitem>
<listitem>
- this file, <filename>readme.txt</filename>.
</listitem>
</itemizedlist>
</section>

<section>
<title>
Installation
</title>

<para>
On Unix-like systems, run <command>make</command>. If you are using Expat 1.2, define <varname>EXPAT_H</varname> as <filename>xmlparse.h</filename> (instead of <filename>expat.h</filename>).
</para>

<para>
On Windows, use rnv.exe. To recompile from the sources, use Makefile.bcc with <application>Borland C/C++ Compiler</application>, or create a makefile or project for your environment.
</para>
</section>

<section>
<title>
Invocation
</title>

<para>
The command-line syntax is
</para>
<synopsis>

        rnv {-q|-p|-s|-v|-h} grammar.rnc {document1.xml}

</synopsis>

<para>
If no documents are specified, <application>RNV</application> attempts to read the XML document from the standard input. The options are:
</para>
<variablelist>
<varlistentry>
<term>
<option>-q</option>
</term>
<listitem>
names of files being processed are not printed; in error messages, expected elements and attributes are not listed;
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>-p</option>
</term>
<listitem>
xml input is copied to the output;
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>-s</option>
</term>
<listitem>
rnv uses less memory and runs slower.
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem>
rnv version is displayed
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h or -?</option>
</term>
<listitem>
<application>RNV</application> displays usage summary and exits.
</listitem>
</varlistentry>
</variablelist>
</section>

<section>
<title>
Limitations
</title>

<itemizedlist>
<listitem>
RNV assumes that the encoding of the syntax file is UTF-8.
</listitem>

<listitem>
<para>
Support for XSL Schema Part 2: Datatypes is partial. 
</para>
<itemizedlist>
<listitem>
* ordering for <varname>duration</varname> is not implemented;
</listitem>
<listitem>
*  only local parts of <classname>QName</classname> values are checked for equality, <varname>ENTITY</varname> values are only checked for lexical validity.
</listitem>
</itemizedlist>
</listitem>
<listitem>
The schema parser does not check that all restrictions are obeyed, in particular, restrictions 7.3 and 7.4 are not checked.
</listitem>

<listitem>
<para>
RNV for Win32 platforms is a Unix program compiled on Win32. It expects file paths to be written with normal slashes; if a schema is in a different directory and includes or refers external files, then the schema's path must be written in the Unix way for the relative paths to work. For example, under Windows, rnv that uses <filename>..\schema\docbook.rnc</filename> to validate <filename>userguide.dbx</filename> should be invoked as
</para>

<programlisting>

      rnv.exe ../schema/docbook.rnc userguide.dbx 
</programlisting>
</listitem>
</itemizedlist>


</section>

<section>
<title>
ARX
</title>

<para>
<application>ARX</application> is a tool to automatically determine the type of a document from its name and contents. It is inspired by James Clark's schema location approach for nXML, <ulink>http://groups.yahoo.com/group/emacs-nxml-mode/message/259</ulink>, and is a development of the idea described in <ulink>http://relaxng.org/pipermail/relaxng-user/2003-December/000214.html</ulink>. 
</para>

<para>
<application>ARX</application> is a command-line utility. The invocation syntax is
</para>

<synopsis>

        arx {-n|-v|-h} document.xml  arx.conf {arx.conf}

</synopsis>

<para><application>ARX</application> either prints a string corresponding to the document's type or nothing if the type cannot be determined. The options are:
</para>
<variablelist>
<varlistentry>
<term>
<option>-n</option>
</term>
<listitem>
turns off prepending base path of the configuration file to the result, even if it looks like a relative path (useful when the configuration file and the grammars are in separate directories, or for association with something that is not a file);
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>-v</option>
</term>
<listitem>
prints current version;
</listitem>
</varlistentry>
<varlistentry>
<term>
<option>-h or -?</option>
</term>
<listitem>
displays usage summary and exit.
</listitem>
</varlistentry>
</variablelist> 

<para>
The configuration file must confrom to the following grammar:
</para>

<programlisting>

      arx = grammars route*
      grammars = "grammars"  "{" type2string+ "}"
      type2string =  type "=" literal
      type = nmtoken
      route = match|nomatch|valid|invalid
      match = "=~" regexp "=>" type
      nomatch = "!~" regexp "=>" type
      valid = "valid" "{" rng "}" "=>" type
      invalid = "!valid" "{" rng "}" "=>" type

      literal=string in '"', '"' inside must be prepended by '\'
      regexp=string in '/', '/' inside must be prepended by '\'
      rng=Relax NG Compact Syntax

      Comments start with # and continue till the end of line.
</programlisting>

<para>Rules are processed sequentially, the first matching rule determines the file's type. Relax NG templates are matched against file contents, regular expressions are applied to file names.
The sample below associates documents with grammars for XSLT, DocBook or XSL FO. 
</para>

<programlisting>

      grammars {
	docbook="docbook.rnc"
	xslt="xslt.rnc"
	xslfo="fo.rnc"
      }

      valid {
	start = element (book|article|chapter|reference) {any}
	any = (element * {any}|attribute * {text}|text)*
      } => docbook

      !valid {
	default namespace xsl = "http://www.w3.org/1999/XSL/Transform"
	start = element *-xsl:* {not-xsl}
	not-xsl = (element *-xsl:* {not-xsl}|attribute * {text}|text)*
      } => xslt

      =~/.*\.xsl/ => xslt
      =~/.*\.fo/ => xslfo
</programlisting>

<para>
<application>ARX</application> can also be used to link documents to any type of information or processing. 
</para>
</section>
<section>
<title>
New versions
</title>
<para>
Visit <ulink>http://davidashen.net/</ulink> for news and downloads.
</para>
</section>

</article>
